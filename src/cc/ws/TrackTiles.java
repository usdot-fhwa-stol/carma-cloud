/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cc.ws;

import cc.util.Arrays;
import cc.util.FileUtil;
import cc.util.Geo;
import cc.util.TileUtil;
import cc.vector_tile.VectorTile;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 *
 * @author aaron.cherney
 */
public class TrackTiles extends HttpServlet
{
	ArrayList<double[]> m_oTracks = null;
	ArrayList<double[]> m_oGeos = null;
	ArrayList<double[]> m_oLWs = null;
	ArrayList<double[]> m_oPerps = null;
	ArrayList<double[]> m_oLSs = null;
	int[] m_nRoads = null;
	String m_sTrackFile;
	
	@Override
	public void init(ServletConfig oConfig)
	   throws ServletException
	{
		try
		{
			m_sTrackFile = oConfig.getInitParameter("file");
		}
		catch (Exception oEx)
		{
			throw new ServletException(oEx);
		}
	}
	
	@Override
	protected void doGet(HttpServletRequest oRequest, HttpServletResponse oResponse)
	   throws ServletException, IOException
	{
		synchronized (this)
		{
			if (m_oTracks == null)
			{
				Path oTrackFile = Paths.get(m_sTrackFile);
				if (Files.exists(oTrackFile))
				{
					ArrayList<double[]> oTracks = new ArrayList();
					ArrayList<Integer> oRoads = new ArrayList();
					ArrayList<double[]> oGeos = new ArrayList();
					ArrayList<double[]> oLSs = new ArrayList();
					ArrayList<double[]> oLWs = new ArrayList();
					ArrayList<double[]> oPerps = new ArrayList();
					try (DataInputStream oIn = new DataInputStream(new BufferedInputStream(FileUtil.newInputStream(oTrackFile))))
					{
						while (oIn.available() > 0)
						{
							int nPoints = oIn.readInt();
							for (int nIndex = 0; nIndex < nPoints; nIndex++)
								oGeos.add(new double[]{oIn.readDouble(), oIn.readDouble()});
							nPoints = oIn.readInt();
							for (int nIndex = 0; nIndex < nPoints; nIndex++)
								oLSs.add(new double[]{oIn.readDouble(), oIn.readDouble()});
							nPoints = oIn.readInt();
							for (int nIndex = 0; nIndex < nPoints; nIndex++)
								oLWs.add(new double[]{oIn.readDouble(), oIn.readDouble()});
							nPoints = oIn.readInt();
							for (int nIndex = 0; nIndex < nPoints; nIndex++)
							{
								double[] dLine = Arrays.newDoubleArray(9);
								dLine = Arrays.add(dLine, new double[]{Double.MAX_VALUE, Double.MAX_VALUE, -Double.MAX_VALUE, -Double.MAX_VALUE});
								dLine = Arrays.addAndUpdate(dLine, oIn.readDouble(), oIn.readDouble());
								dLine = Arrays.addAndUpdate(dLine, oIn.readDouble(), oIn.readDouble());
								oPerps.add(dLine);
							}
							nPoints = oIn.readInt();
							for (int i = 0; i < nPoints; i++)
							{
								oRoads.add(oIn.readInt());
								int nOrds = oIn.readInt();
								double[] dTrack = Arrays.newDoubleArray(nOrds + 5);
								dTrack = Arrays.add(dTrack, new double[]{oIn.readDouble(), oIn.readDouble(), oIn.readDouble(), oIn.readDouble()});
								for (int nIndex = 0; nIndex < nOrds; nIndex += 2)
								{
									dTrack = Arrays.add(dTrack, oIn.readDouble(), oIn.readDouble());
								}
								oTracks.add(dTrack);
							}
						}
					}
					m_oTracks = oTracks;
					m_oGeos = oGeos;
					m_oLSs = oLSs;
					m_oLWs = oLWs;
					m_oPerps = oPerps;
					m_nRoads = new int[oRoads.size()];
					int nCount = 0;
					for (Integer oN : oRoads)
					{
						m_nRoads[nCount++] = oN;
					}
				}
			}
		}
		
		if (m_oTracks == null)
			return;
		
		String[] sUriParts = oRequest.getRequestURI().split("/");
		int nZ = Integer.parseInt(sUriParts[sUriParts.length - 3]);
		int nX = Integer.parseInt(sUriParts[sUriParts.length - 2]);
		int nY = Integer.parseInt(sUriParts[sUriParts.length - 1]);
		double[] dBounds = TileUtil.getTileBounds(nZ, nX, nY);
		double[] dClipBounds = TileUtil.getClippingBounds(nZ, nX, nY, dBounds);
		
		int nExtent = 4096;
		VectorTile.Tile.Layer.Builder oLayerBuilder = VectorTile.Tile.Layer.newBuilder();
		oLayerBuilder.setVersion(2);
		oLayerBuilder.setExtent(nExtent);
		oLayerBuilder.setName("track");
		VectorTile.Tile.Feature.Builder oFeatureBuilder = VectorTile.Tile.Feature.newBuilder();
		oFeatureBuilder.setType(VectorTile.Tile.GeomType.LINESTRING);
//		int[][] nGeos = new int[][]{new int[]{9,7230,2712,66,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2},
//								   new int[]{9,7518,2070,3386,0,2,1,0,0,2,1,0,0,2,0,2,1,0,0,2,1,2,0,2,1,0,0,2,0,2,1,0,0,2,1,2,0,2,1,0,0,2,0,2,1,0,0,2,1,2,0,2,1,0,0,2,0,2,1,0,0,2,1,2,0,2,1,0,0,2,0,2,1,0,0,2,1,2,0,2,1,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,0,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,0,0,2,1,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,0,0,2,1,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,0,0,2,1,2,0,2,1,2,0,2,1,2,0,2,1,2,0,2,1,0,0,2,0,2,1,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,2,0,2,1,2,0,2,1,2,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,2,0,2,1,2,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,2,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,2,0,2,1,2,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,2,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,2,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,2,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,1,2,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,1,2,0,2,1,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,1,2,0,2,0,2,1,0,0,2,0,2,1,2,0,2,0,2,1,0,0,2,0,2,1,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,1,2,0,2,0,2,1,0,0,2,0,2,1,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,1,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,1,2,0,2,0,2,1,0,0,2,0,2,1,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,1,2,0,2,0,2,1,0,0,2,0,2,1,2,0,2,0,2,1,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,1,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,1,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,1,2,0,2,0,2,1,2,0,2,0,2},
//								   new int[]{9,8410,1284,5906,0,2,1,0,1,2,1,0,0,2,1,0,1,0,0,2,1,0,1,0,0,2,1,0,1,0,0,2,1,0,1,2,1,0,1,2,1,0,0,2,1,0,1,0,0,2,1,0,1,0,0,2,1,0,1,2,1,0,1,2,1,0,0,2,1,0,1,0,0,2,1,0,1,0,0,2,1,0,1,2,1,0,1,2,1,0,0,2,1,0,1,0,0,2,1,0,1,0,0,2,1,0,1,2,1,0,0,2,1,0,1,0,0,2,1,0,1,2,1,0,1,2,1,0,0,2,1,0,1,0,0,2,1,0,1,0,0,2,1,0,1,2,1,0,0,2,1,0,1,0,0,2,1,0,1,2,1,0,1,2,1,0,0,2,1,0,1,0,0,2,1,0,1,0,0,2,1,0,1,2,1,0,0,2,1,0,1,0,0,2,1,0,1,2,1,0,1,2,1,0,0,2,1,0,1,0,0,2,1,0,1,2,1,0,0,2,1,0,1,0,0,2,1,0,1,2,1,0,0,2,1,0,1,0,0,2,1,0,1,2,1,0,0,2,1,0,1,0,0,2,1,0,1,0,0,2,1,0,1,2,1,0,0,2,1,0,1,0,0,2,1,0,1,2,1,0,0,2,1,0,1,0,0,2,1,0,1,0,0,2,1,0,0,2,1,0,1,0,0,2,1,0,1,0,0,2,1,0,0,2,1,0,1,0,0,2,1,0,1,2,1,0,0,2,1,0,1,0,0,2,1,0,1,2,1,0,0,2,1,0,1,0,0,2,1,0,1,2,1,0,0,2,1,0,1,0,0,2,1,0,1,2,1,0,0,2,1,0,1,0,0,2,1,0,1,2,1,0,0,2,1,0,1,0,0,2,1,0,1,2,1,0,0,2,1,0,1,0,0,2,1,0,0,2,1,0,1,0,0,2,1,0,1,2,1,0,0,2,1,0,1,0,0,2,1,0,1,2,1,0,0,2,1,0,1,0,0,2,1,0,0,2,1,0,1,0,0,2,1,0,1,2,1,0,0,2,1,0,1,2,1,0,0,2,1,0,1,0,0,2,1,0,1,2,1,0,0,2,1,0,1,0,0,2,1,0,0,2,1,0,1,2,1,0,0,2,1,0,1,0,0,2,1,0,0,2,1,0,1,0,0,2,1,0,0,2,1,0,1,0,0,2,1,0,0,2,1,0,1,2,1,0,0,2,1,0,1,0,0,2,1,0,0,2,1,0,1,2,1,0,0,2,1,0,1,2,1,0,0,2,1,0,0,2,1,0,1,2,1,0,0,2,1,0,1,2,1,0,0,2,1,0,0,2,1,0,1,2,1,2,1,0,0,2,1,0,1,2,1,0,0,2,1,0,0,2,1,0,1,2,1,2,1,0,0,2,1,0,0,2,1,0,1,0,0,2,1,0,0,2,1,0,0,2,1,0,1,2,1,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,1,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,1,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,1,2,1,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,1,2,1,2,1,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,1,2,1,2,1,2,1,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,1,2,1,2,1,2,1,2,1,2,1,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,2,1,2,1,2,1,2,1,2,1,2,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,2,1,2,1,2,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,2,1,2,1,2,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,2,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,2,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,2,1,2,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,2,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,0,0,2,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,2,1,2,0,2,1,0,0,2,1,0,0,2,1,0,0,2,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,2,0,2,1,0,0,2,1,0,0,2,1,0,0,2,1,2,0,2,1,0,0,2,1,0,0,2,1,2,0,2,1,0,0,2,1,0,0,2,1,0,0,2,0,2,1,0,0,2,1,0,0,2,1,2,0,2,1,0,0,2,1,0,0,2,1,0,0,2,0,2,1,0,0,2,1,0,0,2,1,2,0,2,1,0,0,2,1,0,0,2,1,2,0,2,1,0,0,2,1,0,0,2,1,2,0,2,1,0,0,2,1,0,0,2,0,2,1,0,0,2,1,0,0,2,1,2,0,2,1,0,0,2,1,0,0,2,0,2,1,0,0,2,1,0,0,2,1,2,0,2,1,0,0,2,1,2,0,2,1,0,0,2,1,0,0,2,1,2,0,2,1,0,0,2,1,2,0,2,1,0,0,2,1,2,0,2,1,0,0,2,1,2,0,2,1,0,0,2,1,0,0,2,0,2,1,0,0,2,1,2,0,2,1,0,0,2,1,0,0,2,0,2,1,0,0,2,1,2,0,2,1,0,0,2,1,2,0,2,1,0,0,2,1,2,0,2,1,0,0,2,0,2,1,0,0,2,1,0,0,2,0,2,1,0,0,2,1,2,0,2,1,0,0,2,1,2,0,2,1,0,0,2},
//								   new int[]{9,8448,1264,218,0,2,1,0,1,0,0,2,1,0,1,0,0,2,1,0,1,0,0,2,1,0,1,2,1,0,1,2,1,0,0,2,1,0,1,0,0,2,1,0,1,0,0,2,1,0,1,0,0,2,1,0,1,0},
//								   new int[]{9,7086,3114,25386,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,0,0,2,0,2,0,2,1,2,0,2,0,2,0,2,1,0,0,2}};
//		for (int[] nGeo : nGeos)
//		{
//			for (int nPt : nGeo)
//			{
//				oFeatureBuilder.addGeometry(nPt);	
//			}
//			oLayerBuilder.addFeatures(oFeatureBuilder.build());
//			oFeatureBuilder.clearGeometry();
//		}
		
		int[] nCur = new int[2];
		int[] nPointBuffer = Arrays.newIntArray(1024);
		ArrayList<double[]> oClipped = new ArrayList();
		for (int nIndex = 0; nIndex < m_oTracks.size(); nIndex++)
		{
			double[] dTrack = m_oTracks.get(nIndex);			
			if (!Geo.boundingBoxesIntersect(dClipBounds[0], dClipBounds[1], dClipBounds[2], dClipBounds[3], dTrack[1], dTrack[2], dTrack[3], dTrack[4]))
				continue;

//			System.out.println(nRoad);
			oClipped.clear();
			TileUtil.clipLineString(dTrack, 5, dClipBounds, oClipped);
			if (oClipped.isEmpty())
				continue;

			for (double[] dLine : oClipped)
			{
				nPointBuffer = TileUtil.addMercLinestring(oFeatureBuilder, nCur, dBounds, nExtent, dLine, nPointBuffer);
				if (oFeatureBuilder.getGeometryCount() > 0)
					oLayerBuilder.addFeatures(oFeatureBuilder.build());
				nCur[0] = nCur[1] = 0;
				oFeatureBuilder.clearGeometry();
			}
		}
		
		VectorTile.Tile.Builder oTile = VectorTile.Tile.newBuilder();
		if (oLayerBuilder.getFeaturesCount() > 0)
				oTile.addLayers(oLayerBuilder.build());
		
		oLayerBuilder.clearFeatures();
		oLayerBuilder.setName("perp");
		for (int nIndex = 0; nIndex < m_oPerps.size(); nIndex++)
		{
			double[] dTrack = m_oPerps.get(nIndex);			
			if (!Geo.boundingBoxesIntersect(dClipBounds[0], dClipBounds[1], dClipBounds[2], dClipBounds[3], dTrack[1], dTrack[2], dTrack[3], dTrack[4]))
				continue;

			oClipped.clear();
			TileUtil.clipLineString(dTrack, 5, dClipBounds, oClipped);
			if (oClipped.isEmpty())
				continue;

			for (double[] dLine : oClipped)
			{
				nPointBuffer = TileUtil.addMercLinestring(oFeatureBuilder, nCur, dBounds, nExtent, dLine, nPointBuffer);
				if (oFeatureBuilder.getGeometryCount() > 0)
					oLayerBuilder.addFeatures(oFeatureBuilder.build());
				nCur[0] = nCur[1] = 0;
				oFeatureBuilder.clearGeometry();
			}
		}
		
		if (oLayerBuilder.getFeaturesCount() > 0)
				oTile.addLayers(oLayerBuilder.build());
		
		oLayerBuilder.clearFeatures();
		oLayerBuilder.setName("geo");
		oFeatureBuilder.setType(VectorTile.Tile.GeomType.POINT);
		for (int nIndex = 0; nIndex < m_oGeos.size(); nIndex++)
		{
			double[] dGeo = m_oGeos.get(nIndex);
			if (!Geo.isInside(dGeo[0], dGeo[1], dClipBounds[3], dClipBounds[2], dClipBounds[1], dClipBounds[0], 0))
				continue;
			TileUtil.addMercPointToFeature(oFeatureBuilder, nCur, dBounds, nExtent, dGeo[0], dGeo[1]);
			if (oFeatureBuilder.getGeometryCount() > 0)
				oLayerBuilder.addFeatures(oFeatureBuilder.build());
			nCur[0] = nCur[1] = 0;
			oFeatureBuilder.clearGeometry();
		}
		if (oLayerBuilder.getFeaturesCount() > 0)
				oTile.addLayers(oLayerBuilder.build());
		
		oLayerBuilder.clearFeatures();
		oLayerBuilder.setName("ls");
		oFeatureBuilder.setType(VectorTile.Tile.GeomType.POINT);
		for (int nIndex = 0; nIndex < m_oLSs.size(); nIndex++)
		{
			double[] dLS = m_oLSs.get(nIndex);
			if (!Geo.isInside(dLS[0], dLS[1], dClipBounds[3], dClipBounds[2], dClipBounds[1], dClipBounds[0], 0))
				continue;
			TileUtil.addMercPointToFeature(oFeatureBuilder, nCur, dBounds, nExtent, dLS[0], dLS[1]);
			if (oFeatureBuilder.getGeometryCount() > 0)
				oLayerBuilder.addFeatures(oFeatureBuilder.build());
			nCur[0] = nCur[1] = 0;
			oFeatureBuilder.clearGeometry();
		}
		if (oLayerBuilder.getFeaturesCount() > 0)
				oTile.addLayers(oLayerBuilder.build());
		
		oLayerBuilder.clearFeatures();
		oLayerBuilder.setName("lw");
		oFeatureBuilder.setType(VectorTile.Tile.GeomType.POINT);
		for (int nIndex = 0; nIndex < m_oLWs.size(); nIndex++)
		{
			double[] dGeo = m_oLWs.get(nIndex);
			if (!Geo.isInside(dGeo[0], dGeo[1], dClipBounds[3], dClipBounds[2], dClipBounds[1], dClipBounds[0], 0))
				continue;
			TileUtil.addMercPointToFeature(oFeatureBuilder, nCur, dBounds, nExtent, dGeo[0], dGeo[1]);
			if (oFeatureBuilder.getGeometryCount() > 0)
				oLayerBuilder.addFeatures(oFeatureBuilder.build());
			nCur[0] = nCur[1] = 0;
			oFeatureBuilder.clearGeometry();
		}
		if (oLayerBuilder.getFeaturesCount() > 0)
				oTile.addLayers(oLayerBuilder.build());
		
		oResponse.setContentType("application/x-protobuf");
		if (oTile.getLayersCount() > 0)
			oTile.build().writeTo(oResponse.getOutputStream());
	}
}
