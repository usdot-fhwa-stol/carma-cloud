
function findNearest(includeLeft, includeRight, value, allowedValues)
{
  var nearest = null;
  var diff = null;
  var values = allowedValues;
  for (var i = 0; i < values.length; i++)
  {
    if ((includeLeft && values[i] <= value) || (includeRight && values[i] >= value))
    {
      var newDiff = Math.abs(value - values[i]);
      if (diff === null || newDiff < diff)
      {
        nearest = values[i];
        diff = newDiff;
      }
    }
  }
  return nearest;
}


function _writeLabel(label, percentage, element, labelClass)
{

  var el = $('<label>' + label + '</label>').css('left', percentage);

  if (labelClass)
    el.addClass(labelClass);

  $(element).append(el);
}


function writeTicks(tickValues, valueRange, minValue, appendElement)
{
  appendElement.find('div.label-tick').remove();
  var arrayLength = tickValues.length;

  for (var i = 0; i < arrayLength; i++)
  {
    var value = tickValues[i];

    var leftPercent = ((value - minValue) / valueRange * 100) + '%';


    var tick = $('<div></div>').css('left', leftPercent).addClass('label-tick');
    $(appendElement).append(tick);
  }
}

function writeLabels(labelValues, valueRange, minValue, appendElement, labels, defaultLabelFn, labelClass)
{
  appendElement.find('label.label-under, label.label-on').remove();
  var arrayLength = labelValues.length;

  //use the values themselves as the labels if nothing was passed in


  for (var i = 0; i < arrayLength; i++)
  {
    var value = labelValues[i];

    var leftPercent = ((value - minValue) / valueRange * 100) + '%';

    var label = (labels && labels[value]) ? labels[value] : defaultLabelFn(value);

    _writeLabel(label, leftPercent, appendElement, labelClass);
  }
}

$.widget("sp.labeledSlider", $.ui.slider, {

  options: {
    labelPosition: 'under',
    defaultLabelFn: function (value)
    {
      return value;
    },
    slide: function (event, ui)
    {
      var jqthis = $(this);
      var allowedValues = jqthis.labeledSlider("allowedValues");
      if (!allowedValues || allowedValues.length === 0)
        return;

      var includeLeft = event.keyCode !== $.ui.keyCode.RIGHT;
      var includeRight = event.keyCode !== $.ui.keyCode.LEFT;

      if (ui.values)
      {
        jqthis.labeledSlider('values', 0, findNearest(includeLeft, includeRight, ui.values[0], jqthis.labeledSlider("allowedValues")));//allowedValues
        jqthis.labeledSlider('values', 1, findNearest(includeLeft, includeRight, ui.values[1], jqthis.labeledSlider("allowedValues")));//allowedValues
      }
      else
        jqthis.labeledSlider('value', findNearest(includeLeft, includeRight, ui.value, jqthis.labeledSlider("allowedValues")));//allowedValues

      return false;
    }
  },

  _create: function ( )
  {


    var options = this.options;

    if (options.labelValues)
    {
      if (options.labelPosition === 'under')
        $('<div class="ui-widget-content slider-label-spacer"></div>').insertAfter($(this.element).wrap('<div class="ui-widget-content slider-container"></div>').parent());
    }

    this._super();
    //this._drawLabels();

//    writeTicks(values, 240 - (-60), -60, document.getElementById('slider'));
//    writeLabels([-60, -30, 0, 30, 60, 120, 180, 240], 240 - (-60), -60, document.getElementById('slider'), {0: String("00" + (currentDate.getHours())).slice(-2) + ':' + String("00" + (currentDate.getMinutes())).slice(-2)});g


    var range = options.max - options.min;

    var tickValues;
    if (options.tickValues)
      tickValues = options.tickValues;
    else if (options.allowedValues && options.writeTicks)
      tickValues = options.allowedValues;

    if (tickValues)
      writeTicks(tickValues, range, options.min, this.element);
    if (options.labelValues)
      writeLabels(options.labelValues, range, options.min, this.element, options.labels, options.defaultLabelFn, options.labelPosition === 'under' ? 'label-under' : 'label-on');
  },
  allowedValues: function (  )
  {
    return this.options.allowedValues;
  },

  _setOption: function (key, value)
  {

    this._super(key, value);


    var options = this.options;
    var range = options.max - options.min;


    switch (key)
    {

      case 'labels':
      case 'labelValues':

        if (options.labelValues)
          writeLabels(options.labelValues, range, options.min, this.element, options.labels, options.defaultLabelFn, options.labelPosition === 'under' ? 'label-under' : 'label-on');
        break;
      case 'tickValues':

        var tickValues;
        if (options.tickValues)
          tickValues = options.tickValues;
        else if (options.allowedValues && options.writeTicks)
          tickValues = options.allowedValues;

        if (tickValues)
          writeTicks(tickValues, range, options.min, this.element);
        break;

    }
  }
});


